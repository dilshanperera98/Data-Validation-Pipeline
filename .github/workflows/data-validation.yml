name: Data Validation Pipeline

on:
  push:
    branches: [ main ]
  pull_request: 
    branches: [ main ]
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

jobs:
  data-validation:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-dev python3.12-venv libgomp1 unzip file

    - name: Install Java for PySpark
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '11'
          
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel
        pip install pyspark==3.5.0 pandas==2.2.1 numpy==1.26.4 openpyxl==3.1.2 xlsxwriter==3.2.0

    - name: Prepare data directory
      run: |
        mkdir -p input_data
        # Validate test data before processing
        if [ -f data/test1.xlsx ]; then
          echo "Verifying local Excel file integrity..."
          unzip -t data/test1.xlsx || { echo "Corrupted Excel file in repository!"; exit 1; }
          cp -v data/test1.xlsx input_data/
        else
          echo "No local data file found, attempting download..."
          curl -o input_data/test1.xlsx https://your-actual-data-source.com/real-data.xlsx || exit 1
          
          echo "Validating downloaded file:"
          ls -lh input_data/
          
          # Check if file has valid content
          if [ $(stat -c%s input_data/test1.xlsx) -lt 1024 ]; then
            echo "Error: Downloaded file is too small (might be HTML error page)"
            exit 1
          fi
          
          echo "Verifying file type:"
          file --mime-type input_data/test1.xlsx
          
          echo "Verifying Excel file integrity..."
          unzip -t input_data/test1.xlsx || { echo "Downloaded file is corrupted or not a valid Excel file!"; exit 1; }
        fi

    - name: Create reports directory
      run: |
        mkdir -p reports
        echo "Reports directory created: $(ls -l reports)"

    - name: Run data validation
      run: |
        echo "Current directory structure:"
        ls -R
        python scripts/data_validation.py --input input_data/test1.xlsx --output reports/
        
        # Ensure reports are in correct location
        if [ -d input_data/reports ]; then
          echo "Moving misplaced reports to correct directory"
          mv input_data/reports/* reports/ 2>/dev/null || true
        fi

        echo "Generated reports:"
        ls -l reports/
        if [ ! -f reports/data_quality_report.xlsx ] || [ ! -f reports/data_quality_report.txt ]; then
          echo "Error: Required reports not generated!"
          exit 1
        fi

    - name: Upload validation reports
      uses: actions/upload-artifact@v4
      with:
        name: validation-reports
        path: |
          reports/data_quality_report.xlsx
          reports/data_quality_report.txt
          reports/missing_values_report.xlsx
        if-no-files-found: error
        compression-level: 6
        retention-days: 7

    - name: Check validation status
      id: check_status
      run: |
        if grep -q "Status: FAILED" reports/data_quality_report.txt; then
          echo "VALIDATION_FAILED=true" >> $GITHUB_ENV
          echo "::error::Data validation failed - check reports for details"
        else
          echo "VALIDATION_FAILED=false" >> $GITHUB_ENV
          echo "::notice::Data validation completed successfully"
        fi
        
    - name: Send notification on failure
      if: env.VALIDATION_FAILED == 'true'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'Data Validation Failed',
            body: 'The data validation pipeline detected issues. Please check the [latest workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.'
          })